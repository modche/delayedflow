[{"path":"/articles/tidy_streamflow_contr.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"02 - Delayedflow Analysis in R tidyverse","text":"","code":"df <- read_tsv('https://raw.githubusercontent.com/modche/science_contr/master/4ezg.txt', col_types = cols())"},{"path":"/articles/tidy_streamflow_contr.html","id":"cdc-calculation-and-plotting","dir":"Articles","previous_headings":"","what":"CDC: Calculation and plotting","title":"02 - Delayedflow Analysis in R tidyverse","text":"First , CDCs catchments generated. delayed flow separation performed block length 1 180. plot highlights differences CDCs four catchments.","code":"df %>%      group_by(filename) %>%      summarise(cdc = dfi_n(q = q, n = 1:180)$dfi, .groups = \"keep\", n = 0:180 ) %>%      ungroup() %>%      ggplot(aes(x=n, y = cdc)) +         geom_line(aes(colour = filename)) +         scale_x_continuous(breaks = c(0:6 * 30)) +         theme_bw(14) +         labs(title = \"\",              subtitle = \"\",              caption = \"\",               colour = \"CDCs\",              x = \"Block length N (days)\", y = \"DFI (-)\")+         theme(legend.position = c(0.80, 0.70))"},{"path":"/articles/tidy_streamflow_contr.html","id":"breakpoint-estaimates","dir":"Articles","previous_headings":"","what":"Breakpoint estaimates","title":"02 - Delayedflow Analysis in R tidyverse","text":"breakpoints heart DFI analysis. n breakpoints n+1 delayed (relative) contributions (sum = 1) can estimated. Let’s look different breakpoints (days) across catchments. Breakpoint estimates","code":"df2 <- df %>%      group_by(filename) %>%      summarise(cdc = dfi_n(q = q, n = 1:180)$dfi, .groups = \"keep\", n = 0:180 ) %>%      ungroup()  df2 ## # A tibble: 724 × 3 ##    filename     cdc     n ##    <chr>      <dbl> <int> ##  1 catchment1 1         0 ##  2 catchment1 0.953     1 ##  3 catchment1 0.895     2 ##  4 catchment1 0.853     3 ##  5 catchment1 0.816     4 ##  6 catchment1 0.791     5 ##  7 catchment1 0.764     6 ##  8 catchment1 0.747     7 ##  9 catchment1 0.727     8 ## 10 catchment1 0.718     9 ## # … with 714 more rows bp_df <- df2 %>%          group_by(filename) %>%          summarize(bps = find_bps(cdc, n_bp = 3, bp_max = 65)$bps_position) %>%          mutate(id = names(bps)) %>%          ungroup() %>%          pivot_wider(names_from = \"id\", values_from = \"bps\") ## Calculating breakpoints...Done.  ##  ## Calculating breakpoints...Done.  ##  ## Calculating breakpoints...Done.  ##  ## Calculating breakpoints...Done. bp_df"},{"path":"/articles/tidy_streamflow_contr.html","id":"relative-streamflow-contributions","dir":"Articles","previous_headings":"","what":"Relative streamflow contributions","title":"02 - Delayedflow Analysis in R tidyverse","text":"","code":"## Calculating breakpoints...Done.  ##  ## Calculating breakpoints...Done.  ##  ## Calculating breakpoints...Done.  ##  ## Calculating breakpoints...Done. ## # A tibble: 16 × 3 ##    filename   rel_contr class   ##    <chr>          <dbl> <chr>   ##  1 catchment1    0.236  contr_1 ##  2 catchment1    0.506  contr_2 ##  3 catchment1    0.0736 contr_3 ##  4 catchment1    0.184  contr_4 ##  5 catchment2    0.184  contr_1 ##  6 catchment2    0.134  contr_2 ##  7 catchment2    0.157  contr_3 ##  8 catchment2    0.525  contr_4 ##  9 catchment3    0.488  contr_1 ## 10 catchment3    0.233  contr_2 ## 11 catchment3    0.148  contr_3 ## 12 catchment3    0.130  contr_4 ## 13 catchment4    0.566  contr_1 ## 14 catchment4    0.213  contr_2 ## 15 catchment4    0.114  contr_3 ## 16 catchment4    0.107  contr_4"},{"path":"/articles/tidy_streamflow_contr.html","id":"plot-relative-contributions","dir":"Articles","previous_headings":"","what":"Plot relative contributions","title":"02 - Delayedflow Analysis in R tidyverse","text":"contr can vary beetween 0 1. contrs together add 1.","code":"ggplot(data = contr_df) +      geom_col(aes(x = rel_contr, y = filename, fill = class),                      width = 0.50,                      colour = \"black\") +     scale_fill_brewer(palette = \"RdBu\",                        direction = 1,                        guide = guide_legend(reverse = FALSE),                       name = \"Delay class\") +     scale_x_continuous(labels = scales::percent_format()) +     theme_bw(14) +     theme(legend.position = \"bottom\") +     labs(title = \"Delayed flow contributions\",      subtitle = \"\",      caption = \"\",       x = \"\\nRelative contribution to streamflow\", y = \"\")"},{"path":"/articles/tidy_streamflow_contr.html","id":"interpretation-of-the-results","dir":"Articles","previous_headings":"","what":"Interpretation of the results","title":"02 - Delayedflow Analysis in R tidyverse","text":"example Catchment #1 high proportion intermediate contributions (.e. snow melt high alpine catchment). Catchment #2 > 50% baseline contributions means highly groundwater-dominated. Comparing Catchment #4 vs. Catchment #3 first one short-delayed contributions also visible rapid drop CDC curve .","code":""},{"path":"/articles/workflow.html","id":"load-package-and-data","dir":"Articles","previous_headings":"","what":"Load package and data","title":"01 - Workflow with delayflow package","text":"","code":"library(delayedflow) q_obs <- q_data$q_obs"},{"path":"/articles/workflow.html","id":"create-cdcs-from-dfi","dir":"Articles","previous_headings":"","what":"Create CDCs from DFI","title":"01 - Workflow with delayflow package","text":"Now see DFI curve looks like:","code":"cdc <- dfi_n(q = q_obs, n = 1:120)  head(cdc) ##   n       dfi ## 1 0 1.0000000 ## 2 1 0.7898710 ## 3 2 0.6637347 ## 4 3 0.6014212 ## 5 4 0.5483716 ## 6 5 0.5194072 tail(cdc) ##       n        dfi ## 116 115 0.09210385 ## 117 116 0.09210385 ## 118 117 0.09210385 ## 119 118 0.09210385 ## 120 119 0.09210385 ## 121 120 0.09210385 plot(x = 0:120, y = cdc$dfi,       type = \"o\", ylim = c(0,1),      ylab =\"DFI\", xlab = \"Block length N (days)\",      main = \"Characteristic Delay Curve (CDC)\")"},{"path":"/articles/workflow.html","id":"finding-breakpoints","dir":"Articles","previous_headings":"","what":"Finding breakpoints","title":"01 - Workflow with delayflow package","text":"Looking : breakpoint estimates, 4, 20 65 days output objective function relative streamflow contributions filter_min, breakpoint(s) filter_max.","code":"bps <- find_bps(dfi = cdc$dfi,                 n_bp = 3,                plotting = TRUE) ## Calculating breakpoints...Done. bps$bps_position ## bp_1 bp_2 bp_3  ##    4   20   65 bps$bias ## [1] 0.01449936 bps$rel_contr ##   contr_1   contr_2   contr_3   contr_4  ## 0.4516284 0.2286085 0.2107172 0.1090459"},{"path":"/articles/workflow.html","id":"estimation-of-nmax","dir":"Articles","previous_headings":"","what":"Estimation of nmax","title":"01 - Workflow with delayflow package","text":"results show breakpoints 65, 66 45 days (depending low flow threshold) lead DFI value equals threshold.","code":"head(q_data) ##         date q_obs ## 1 2000-01-01 11.10 ## 2 2000-01-02 11.20 ## 3 2000-01-03 10.40 ## 4 2000-01-04  9.74 ## 5 2000-01-05 13.80 ## 6 2000-01-06 12.80 find_nmax(q_data) ## $index_value ## [1] 0.1126447 ##  ## $bp_nmax ## [1] 65 dfi_n(q = q_data$q_obs, n = c(44:46, 64:67), add_zero = FALSE) ##    n       dfi ## 1 44 0.2173933 ## 2 45 0.2173933 ## 3 46 0.2173933 ## 4 64 0.1144248 ## 5 65 0.1090459 ## 6 66 0.1090459 ## 7 67 0.1090459"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Stoelzle. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stoelzle M (2022). delayedflow: Delayed-flow separation streamflow data. R package version 0.21, https://github.com/modche/delayedflow.","code":"@Manual{,   title = {delayedflow: Delayed-flow separation for streamflow data},   author = {Michael Stoelzle},   year = {2022},   note = {R package version 0.21},   url = {https://github.com/modche/delayedflow}, }"},{"path":"/index.html","id":"delayedflow-package-for-r","dir":"","previous_headings":"","what":"Delayed-flow separation for streamflow data","title":"Delayed-flow separation for streamflow data","text":"Package website https://modche.github.io/delayedflow/","code":""},{"path":"/index.html","id":"1-introduction","dir":"","previous_headings":"","what":"1. Introduction","title":"Delayed-flow separation for streamflow data","text":"delayedflow package R developed make quick easy perform delayed flow separation basis streamflow (discharge) date . package based publication Stoelzle et al. (2020) common binary baseflow separation quick- baseflow advanced DFI (Delayed Flow Index) quantify multiple delayed contributions streamflow. Specifically, R package performs: DFI separations variable block length N (baseflow separation fixed N = 5 days) Estimation breakpoint(s) Quantification relative streamflow contributions different delay classes Couple minor analyses","code":""},{"path":"/index.html","id":"2-package-installation","dir":"","previous_headings":"","what":"2. Package installation","title":"Delayed-flow separation for streamflow data","text":"delayedflow package beta testing now. available CRAN.","code":"# ----- use package in R  ----- #install.packages(\"devtools\") devtools::install_github(\"modche/delayedflow\")"},{"path":"/index.html","id":"3-vignette--manual","dir":"","previous_headings":"","what":"3. Vignette / Manual","title":"Delayed-flow separation for streamflow data","text":"Website package documentation","code":"# ----- get help in R after installation  ----- help(package = \"delayedflow\")"},{"path":"/index.html","id":"3-reporting-issues","dir":"","previous_headings":"","what":"3. Reporting issues","title":"Delayed-flow separation for streamflow data","text":"Please report issue package https://github.com/modche/delayedflow/issues especially helpful eliminate bugs improve functionality package.","code":""},{"path":"/index.html","id":"4-references","dir":"","previous_headings":"","what":"4. References","title":"Delayed-flow separation for streamflow data","text":"Stoelzle, M., Schuetz, T., Weiler, M., Stahl, K., & Tallaksen, L. M. (2020). Beyond binary baseflow separation: delayed-flow index multiple streamflow contributions. Hydrology Earth System Sciences, 24(2), 849-867, https://hess.copernicus.org/articles/24/849/2020/. Baseflow function based lfstat package. https://cran.r-project.org/web/packages/lfstat/index.html","code":""},{"path":"/reference/baseflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of baseflow based on smoothed minima method — baseflow","title":"Calculation of baseflow based on smoothed minima method — baseflow","text":"Original baseflow function lfstat package.","code":""},{"path":"/reference/baseflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of baseflow based on smoothed minima method — baseflow","text":"","code":"baseflow(x, tp.factor = 0.9, block.len = 5)"},{"path":"/reference/baseflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of baseflow based on smoothed minima method — baseflow","text":"x numeric vector observed streamflow, normally given daily values tp.factor numeric vector, turning point factor block.len numeric vector, block size filter set flow minima","code":""},{"path":"/reference/baseflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of baseflow based on smoothed minima method — baseflow","text":"Baseflow series.","code":""},{"path":"/reference/baseflow.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculation of baseflow based on smoothed minima method — baseflow","text":"lfstat: Calculation Low Flow Statistics Daily Stream Flow Data D. Koffler, T. Gauster, T., G. Laaha (https://CRAN.R-project.org/package=lfstat)","code":""},{"path":"/reference/baseflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of baseflow based on smoothed minima method — baseflow","text":"","code":"if (FALSE) { baseflow(q_data$q_obs, block.len = 10) }"},{"path":"/reference/dfi_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data — dfi_example","title":"Example data — dfi_example","text":"Example DFI values. dummy data. vector 121 DFI-values 1 0. index decreasing monotonously larger n. can used testing find_bps function.","code":""},{"path":"/reference/dfi_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data — dfi_example","text":"","code":"dfi_example"},{"path":"/reference/dfi_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data — dfi_example","text":"vector data","code":""},{"path":"/reference/dfi_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data — dfi_example","text":"","code":"data(dfi_example) dfi_example #>   [1] 1.0000000 0.8405422 0.7387244 0.6770378 0.6361289 0.6126313 0.5776205 #>   [8] 0.5671273 0.5409439 0.5288180 0.5129054 0.5003176 0.5003176 0.4811656 #>  [15] 0.4811656 0.4677625 0.4590217 0.4469832 0.4259402 0.4094476 0.4094476 #>  [22] 0.4094476 0.4006761 0.4006761 0.3839521 0.3839521 0.3839521 0.3752259 #>  [29] 0.3752259 0.3724468 0.3587832 0.3587832 0.3587832 0.3587832 0.3587832 #>  [36] 0.3471278 0.3282138 0.3262966 0.3262966 0.3156789 0.2797003 0.2797003 #>  [43] 0.2797003 0.2743747 0.2743747 0.2658673 0.2658673 0.2616970 0.2616970 #>  [50] 0.2616970 0.2616970 0.2418954 0.2418954 0.2175767 0.2175767 0.2157800 #>  [57] 0.2157800 0.2069918 0.2031831 0.1968977 0.1891137 0.1891137 0.1891137 #>  [64] 0.1891137 0.1888859 0.1888859 0.1888859 0.1815802 0.1815802 0.1815802 #>  [71] 0.1815802 0.1815802 0.1815802 0.1805189 0.1805189 0.1805189 0.1801984 #>  [78] 0.1801984 0.1801984 0.1801984 0.1801984 0.1801984 0.1801984 0.1801984 #>  [85] 0.1801984 0.1801984 0.1794432 0.1794432 0.1794432 0.1794432 0.1775426 #>  [92] 0.1775426 0.1775426 0.1775426 0.1754300 0.1754300 0.1754300 0.1754300 #>  [99] 0.1754300 0.1754300 0.1754300 0.1754300 0.1753587 0.1753587 0.1753587 #> [106] 0.1753587 0.1753587 0.1753587 0.1753587 0.1753587 0.1746737 0.1746737 #> [113] 0.1746737 0.1746737 0.1746737 0.1746737 0.1746737 0.1746737 0.1746737 #> [120] 0.1683539 0.1683539  find_bps(dfi = dfi_example, n_bp = 2, plotting = TRUE) #> Calculating breakpoints...Done.  #>   #> $bps_position #> bp_1 bp_2  #>    8   60  #>  #> $bias #> [1] 0.02465472 #>  #> $rel_contr #>   contr_1   contr_2   contr_3  #> 0.4590561 0.3518302 0.1891137  #>"},{"path":"/reference/dfi_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of DFI (or BFI) with block length n or 1:n — dfi_n","title":"Calculation of DFI (or BFI) with block length n or 1:n — dfi_n","text":"Common baseflow separation separates quick- baseflow block length n = 5 dfi_n(q_obs, n = 5). generate multiple hydrograph separations DFI index n vary 1 nmax (e.g. 60, 90 120 days). function used n vector instead single integer (e.g. dfi_n(q_obs, n = 1:60)) Note, separation n=0 possible. DFI n=1 1 due algorithm streamflow peaks separated delayed flow.","code":""},{"path":"/reference/dfi_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of DFI (or BFI) with block length n or 1:n — dfi_n","text":"","code":"dfi_n(q, n = 5, desc = TRUE, add_zero = TRUE)"},{"path":"/reference/dfi_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of DFI (or BFI) with block length n or 1:n — dfi_n","text":"q vector streamflow series n block length n. n integer (vector length one) single delayed flow separation performed. n vector (length > 1) multiple separations n values calculated. analyze later DFI curve recommended n starts 1 continuous vector (e.g. 1,2,3,.... 58, 59, 60). also variations like n = c(1,5,10,15,30) possible. desc logical, TRUE DFI values converted monotonically descreasing cummin() add_zero logical, default TRUE. TRUE, n=0 dfi=1 added output data.frame. Note hydrograph separation n=0 definition DFI = 1.","code":""},{"path":"/reference/dfi_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of DFI (or BFI) with block length n or 1:n — dfi_n","text":"data.frame two columns: n block length dfi DFI(n) values. n single integer function returns single integer (.e. one DFI(n) value).","code":""},{"path":"/reference/dfi_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of DFI (or BFI) with block length n or 1:n — dfi_n","text":"","code":"# same as BFI calculation bfi <- dfi_n(q_data$q_obs, n = 5) bfi #> [1] 0.5194072  # 60 different separations based on various block length n dfi_n(q_data$q_obs, n = 1:60) #>     n       dfi #> 1   0 1.0000000 #> 2   1 0.7898710 #> 3   2 0.6637347 #> 4   3 0.6014212 #> 5   4 0.5483716 #> 6   5 0.5194072 #> 7   6 0.4909109 #> 8   7 0.4733986 #> 9   8 0.4565189 #> 10  9 0.4447806 #> 11 10 0.4327920 #> 12 11 0.4236019 #> 13 12 0.4030594 #> 14 13 0.4030594 #> 15 14 0.3811144 #> 16 15 0.3756203 #> 17 16 0.3756203 #> 18 17 0.3639153 #> 19 18 0.3608225 #> 20 19 0.3503745 #> 21 20 0.3197631 #> 22 21 0.3035256 #> 23 22 0.2962165 #> 24 23 0.2962165 #> 25 24 0.2938946 #> 26 25 0.2938946 #> 27 26 0.2819608 #> 28 27 0.2799310 #> 29 28 0.2755482 #> 30 29 0.2754435 #> 31 30 0.2754435 #> 32 31 0.2739791 #> 33 32 0.2663682 #> 34 33 0.2586268 #> 35 34 0.2586268 #> 36 35 0.2500075 #> 37 36 0.2500075 #> 38 37 0.2500075 #> 39 38 0.2500075 #> 40 39 0.2286289 #> 41 40 0.2286289 #> 42 41 0.2286289 #> 43 42 0.2286289 #> 44 43 0.2286289 #> 45 44 0.2173933 #> 46 45 0.2173933 #> 47 46 0.2173933 #> 48 47 0.2173933 #> 49 48 0.2173933 #> 50 49 0.2066724 #> 51 50 0.1963658 #> 52 51 0.1689088 #> 53 52 0.1689088 #> 54 53 0.1689088 #> 55 54 0.1483255 #> 56 55 0.1349033 #> 57 56 0.1349033 #> 58 57 0.1293377 #> 59 58 0.1293377 #> 60 59 0.1211372 #> 61 60 0.1211372  # only specific block lengths are used dfi_n(q_data$q_obs, n = c(1:5,10,30,60,90), add_zero = FALSE) #>    n        dfi #> 1  1 0.78987096 #> 2  2 0.66373472 #> 3  3 0.60142124 #> 4  4 0.54837156 #> 5  5 0.51940718 #> 6 10 0.43279199 #> 7 30 0.27635045 #> 8 60 0.15989630 #> 9 90 0.09605968"},{"path":"/reference/find_bps.html","id":null,"dir":"Reference","previous_headings":"","what":"Find breakpoints in DFI curve — find_bps","title":"Find breakpoints in DFI curve — find_bps","text":"Estimates n breakpoints DFI curve. DFI values compared n+1 piecewise linear segments minimization residuals (linear segments DFI curve). Several parameters can customized. q_obs given daily temporal resolution also n can interpreted delay days different contributions (default).","code":""},{"path":"/reference/find_bps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find breakpoints in DFI curve — find_bps","text":"","code":"find_bps(   dfi,   n_bp = 2,   bp_mingap = 5,   bp_min = 0,   bp_max = length(dfi) - 1,   nmax = length(dfi),   of_weights = c(0.5, 0.5),   desc = TRUE,   print = FALSE,   plotting = FALSE,   experimental = FALSE )"},{"path":"/reference/find_bps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find breakpoints in DFI curve — find_bps","text":"dfi numeric, vector DFI values 1 0, dummy data dfi_example can used. n_bp numeric, many breakpoints (1, 2, 3) estimated (default = 2)? n_bp = 3 calculation time longer also nmax high. nmax estimated find_nmax. testing also n_bp = 4 possible See experimental setting. bp_mingap numeric, smallest interval two breakpoints (default = 5). bp_min numeric, bp_min+1 minimum allowed breakpoint position (default = 0). bp_max numeric, bp_max-1 maximum allowed breakpoint position. nmax numeric parameter truncate tailing CDC (.e. length dfi vector). Note, nmax confused bp_max (.e. maximum breakpoint position). of_weights vector two elements, first weight RMSE, second weight MAE. Default c(0.5, 0.5), .e. equal weights. Sum vector must 1. switch one measure use c(1, 0) c(0,1). weighting less focus given upper parts DFI curve (.e. block length n separation 1 10). desc logical, TRUE (recommended) DFI values converted monotonically decreasing cummin() print logical, TRUE best breakpoint estimates calculation printed (debug mode) plotting logical, TRUE DFI curve, piecewise linear segments breakpoints plotted plot() whit DFI curve blue linear segments red. experimental logical, TRUE four breakpoints can estimated.","code":""},{"path":"/reference/find_bps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find breakpoints in DFI curve — find_bps","text":"Returns list 3 elements. breakpoints estimates n breakpoints names bp_n bias value objective function, default: = 1/2 RMSE + 1/2 MAE, minimized. rel_contr Relative streamflow contributions bp_min, breakpoints bp_max, e.g. 2 breakpoints lead 3 relative contributions, 3 breakpoints lead 4 relative contributions. first rel_contr-value fastest contribution streamflow, last rel_contr-value slowest contribution streamflow. contributions add 1.","code":""},{"path":"/reference/find_bps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find breakpoints in DFI curve — find_bps","text":"Stoelzle, M., Schuetz, T., Weiler, M., Stahl, K., & Tallaksen, L. M. (2020). Beyond binary baseflow separation: delayed-flow index multiple streamflow contributions. Hydrology Earth System Sciences, 24(2), 849-867.","code":""},{"path":"/reference/find_bps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find breakpoints in DFI curve — find_bps","text":"","code":"# use dfi_example as an DFI vector with 121 values find_bps(dfi_example, n_bp = 3, bp_max = 90, plotting = TRUE) #> Calculating breakpoints...Done.  #>   #> $bps_position #> bp_1 bp_2 bp_3  #>    4   18   60  #>  #> $bias #> [1] 0.01066672 #>  #> $rel_contr #>   contr_1   contr_2   contr_3   contr_4  #> 0.3638711 0.2101886 0.2368266 0.1891137  #>"},{"path":"/reference/find_nmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Find maximum breakpoint position based on low flow threshold(s) — find_nmax","title":"Find maximum breakpoint position based on low flow threshold(s) — find_nmax","text":"order constrain breakpoint analysis DFI curves (CDCs = Characteristic Delay Curves) length 1:N delayed flow separations short possible. Normally position N searched CDCs flattening (slope = 0). DFI values 1:N separations compared typical low flow indices (like MAM/MQ). low flow indices ranging 0 1 indicating low flow sensitivity. High index values (e.g. 0.60) indicating stable flow regimes larger catchment storages, lower index values (e.g. 0.20) indicating rather flashy flow regimes faster recession behavior. maximum breakpoint position estimated estimating DFI value separation block size N match index value.","code":""},{"path":"/reference/find_nmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find maximum breakpoint position based on low flow threshold(s) — find_nmax","text":"","code":"find_nmax(df, n = 1:180, desc = TRUE, lowflow_index = c(\"mam_mq\"))"},{"path":"/reference/find_nmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find maximum breakpoint position based on low flow threshold(s) — find_nmax","text":"df data.frame two columns, first column must Date, second must streamflow data. n numeric vector desc logical, TRUE DFI values converted monotonically decreasing cummin() lowflow_index Low Flow Index used? MAM/MQ (default), Q95/Q50, Q90/Q50. Index names \"mam_mq\", \"q95_q50\" \"q90_q50\". Note especially highly seasonal regimes deviation indices might large(r).","code":""},{"path":"/reference/find_nmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find maximum breakpoint position based on low flow threshold(s) — find_nmax","text":"Function returns list two elements: $index_value $bp_nmax index_value Index value used low flow index ranging 0 1. Higher values indicating stable flow regimes less low flow sensitivity. bp_nmax Position N breakpoint absolute deviation DFI_N low flow index minimal (considering DFI values), min(.min(abs(cdc$dfi-index)))","code":""},{"path":"/reference/find_nmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find maximum breakpoint position based on low flow threshold(s) — find_nmax","text":"","code":"find_nmax(q_data) #> $index_value #> [1] 0.1126447 #>  #> $bp_nmax #> [1] 65 #>"},{"path":"/reference/mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Absolute Error — mae","title":"Mean Absolute Error — mae","text":"Mean Absolute Error","code":""},{"path":"/reference/mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Absolute Error — mae","text":"","code":"mae(sim, obs)"},{"path":"/reference/mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Absolute Error — mae","text":"sim numeric, simulated values obs numeric, observed values","code":""},{"path":"/reference/mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Absolute Error — mae","text":"Mean absolute error sim obs.","code":""},{"path":"/reference/mae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Absolute Error — mae","text":"","code":"mae(c(1:3), (2:4)) #> [1] 1"},{"path":"/reference/q_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example streamflow data — q_data","title":"Example streamflow data — q_data","text":"18 years daily streamflow river Dreisam (Germany). Values m3/s. Data provided LUBW Baden-Württemberg (Landesanstalt fuer Umwelt, State Institute Environment, https://www.lubw.baden-wuerttemberg.de/startseite)","code":""},{"path":"/reference/q_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example streamflow data — q_data","text":"","code":"q_data"},{"path":"/reference/q_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example streamflow data — q_data","text":"data.frame","code":""},{"path":"/reference/q_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example streamflow data — q_data","text":"","code":"head(q_data, 5) #>         date q_obs #> 1 2000-01-01 11.10 #> 2 2000-01-02 11.20 #> 3 2000-01-03 10.40 #> 4 2000-01-04  9.74 #> 5 2000-01-05 13.80  tail(q_data, 5) #>            date q_obs #> 6936 2018-12-27  6.67 #> 6937 2018-12-28  5.23 #> 6938 2018-12-29  4.22 #> 6939 2018-12-30  3.56 #> 6940 2018-12-31  3.14"},{"path":"/reference/rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Root Mean Square Error — rmse","title":"Root Mean Square Error — rmse","text":"Root Mean Square Error","code":""},{"path":"/reference/rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Root Mean Square Error — rmse","text":"","code":"rmse(sim, obs)"},{"path":"/reference/rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Root Mean Square Error — rmse","text":"sim numeric simulated values obs numeric observed values","code":""},{"path":"/reference/rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Root Mean Square Error — rmse","text":"Root mean square error (rmse) sim obs.","code":""},{"path":"/reference/rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Root Mean Square Error — rmse","text":"","code":"rmse(c(1:3), c(1, 3, 5)) #> [1] 1.290994"},{"path":"/reference/which.min.na.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for which.min(x) — which.min.na","title":"Helper Function for which.min(x) — which.min.na","text":"Calculation minimum position vector NA values.","code":""},{"path":"/reference/which.min.na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for which.min(x) — which.min.na","text":"","code":"which.min.na(x)"},{"path":"/reference/which.min.na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for which.min(x) — which.min.na","text":"x numeric verctor","code":""},{"path":"/reference/which.min.na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for which.min(x) — which.min.na","text":"Position minimum value vector","code":""},{"path":"/reference/which.min.na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for which.min(x) — which.min.na","text":"","code":"which.min.na(c(2,3,4,1,NA,6)) # returns 4 #> [1] 4"},{"path":[]},{"path":"/news/index.html","id":"major-changes-0-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"delayedflow 0.1 (2020-ongoing)","text":"Initial release major functions dfi_n() find_bps() two datasets baseflow() function used directly lfstat package implementation really fast far package dependencies, .e. addtional packages installed delayedflow used beta testing","code":""},{"path":"/news/index.html","id":"delayedflow-0-1","dir":"Changelog","previous_headings":"Major changes","what":"delayedflow 0.11 (2020)","title":"delayedflow 0.1 (2020-ongoing)","text":"adding function find_nmax() derive nmax value. change many parameter names meaningful terms (e.g. bp_mingap). mam_mq delaut low flow index, one index output now possible.","code":""},{"path":"/news/index.html","id":"delayedflow-0-1-1","dir":"Changelog","previous_headings":"Major changes","what":"delayedflow 0.20 (2021-2022)","title":"delayedflow 0.1 (2020-ongoing)","text":"now 4 breakpoints can estimated find_bps() smaller corrections typos adjusted outputs","code":""},{"path":"/news/index.html","id":"delayedflow-0-1-2","dir":"Changelog","previous_headings":"Major changes","what":"delayedflow 0.21 (2022-03-11)","title":"delayedflow 0.1 (2020-ongoing)","text":"typos using pgkdown 2.0.x website.","code":""}]
